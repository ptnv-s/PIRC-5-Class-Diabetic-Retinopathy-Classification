{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ae8ea27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:08.392192Z",
     "iopub.status.busy": "2022-08-28T11:49:08.391688Z",
     "iopub.status.idle": "2022-08-28T11:49:11.403939Z",
     "shell.execute_reply": "2022-08-28T11:49:11.402982Z"
    },
    "papermill": {
     "duration": 3.022551,
     "end_time": "2022-08-28T11:49:11.406399",
     "exception": false,
     "start_time": "2022-08-28T11:49:08.383848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import PIL.Image as Image\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import Dataset,DataLoader\n",
    "from torchvision import models,transforms\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1de4b4b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:11.419671Z",
     "iopub.status.busy": "2022-08-28T11:49:11.418740Z",
     "iopub.status.idle": "2022-08-28T11:49:11.482513Z",
     "shell.execute_reply": "2022-08-28T11:49:11.481515Z"
    },
    "papermill": {
     "duration": 0.073239,
     "end_time": "2022-08-28T11:49:11.485108",
     "exception": false,
     "start_time": "2022-08-28T11:49:11.411869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda\n"
     ]
    }
   ],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') #Use GPU if it's available or else use CPU.\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "07aa37f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:11.497568Z",
     "iopub.status.busy": "2022-08-28T11:49:11.496132Z",
     "iopub.status.idle": "2022-08-28T11:49:11.518325Z",
     "shell.execute_reply": "2022-08-28T11:49:11.516898Z"
    },
    "papermill": {
     "duration": 0.030334,
     "end_time": "2022-08-28T11:49:11.520851",
     "exception": false,
     "start_time": "2022-08-28T11:49:11.490517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No.of.training_samples: 3662\n"
     ]
    }
   ],
   "source": [
    "path = \"/kaggle/input/aptos2019-blindness-detection/\"\n",
    "train_df = pd.read_csv(f\"{path}train.csv\")\n",
    "print(f'No.of.training_samples: {len(train_df)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "79e6228f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:11.532879Z",
     "iopub.status.busy": "2022-08-28T11:49:11.531821Z",
     "iopub.status.idle": "2022-08-28T11:49:11.752844Z",
     "shell.execute_reply": "2022-08-28T11:49:11.751749Z"
    },
    "papermill": {
     "duration": 0.228787,
     "end_time": "2022-08-28T11:49:11.754824",
     "exception": false,
     "start_time": "2022-08-28T11:49:11.526037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAAsTAAALEwEAmpwYAAAQTklEQVR4nO3df6xfdX3H8edrrTKjEnDckdqWXTSFBMkseoMkTsNkSgEjuCyuTQbomNUIiUYTA9sfOBcSsokuZA5TpQEyLWNDQqM4rYxIlohwi10pv8YFS7hNpdexiZumW+G9P+6582u5t733fr/33tLP85Gc3HPe53PO+XxP2tc9/Zxzvk1VIUlqw68tdQckSYvH0Jekhhj6ktQQQ1+SGmLoS1JDli91Bw7nhBNOqOHh4aXuhiS9bGzfvv0nVTU03bojPvSHh4cZHR1d6m5I0stGkqdnWufwjiQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNeSIfyO3H8NXfnNJjrv72guW5LiSdDhe6UtSQwx9SWrIYUM/yeYk+5Ls6qn9fZId3bQ7yY6uPpzkFz3rvtSzzVuTPJRkLMn1SbIgn0iSNKPZjOnfBPwNcMtUoar+cGo+yXXAT3vaP1lVa6fZzw3Ah4EfAHcB64BvzbnHkqR5O+yVflXdCzw33bruav0DwJZD7SPJCuDYqrqvqorJXyAXzbm3kqS+9Dum/w7g2ap6oqd2cpIfJvleknd0tZXAeE+b8a42rSQbk4wmGZ2YmOizi5KkKf2G/gZ+9Sp/L3BSVZ0BfBL4WpJj57rTqtpUVSNVNTI0NO1//iJJmod5P6efZDnw+8Bbp2pVtR/Y381vT/IkcAqwB1jVs/mqriZJWkT9XOn/HvBYVf3/sE2SoSTLuvk3AGuAp6pqL/B8krO6+wCXAHf2cWxJ0jzM5pHNLcD3gVOTjCe5rFu1npfewH0nsLN7hPMfgY9W1dRN4I8BXwHGgCfxyR1JWnSHHd6pqg0z1D84Te124PYZ2o8Cp8+xf5KkAfKNXElqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNeSwoZ9kc5J9SXb11D6TZE+SHd10fs+6q5KMJXk8ybk99XVdbSzJlYP/KJKkw5nNlf5NwLpp6l+oqrXddBdAktOA9cCbum3+NsmyJMuALwLnAacBG7q2kqRFtPxwDarq3iTDs9zfhcCtVbUf+FGSMeDMbt1YVT0FkOTWru0jc++yJGm++hnTvyLJzm745/iuthJ4pqfNeFebqT6tJBuTjCYZnZiY6KOLkqRe8w39G4A3AmuBvcB1g+oQQFVtqqqRqhoZGhoa5K4lqWmHHd6ZTlU9OzWf5MvAN7rFPcDqnqaruhqHqEuSFsm8rvSTrOhZfD8w9WTPVmB9kmOSnAysAe4HHgDWJDk5ySuZvNm7df7dliTNx2Gv9JNsAc4GTkgyDlwNnJ1kLVDAbuAjAFX1cJLbmLxBewC4vKpe6PZzBfBtYBmwuaoeHvSHkSQd2mye3tkwTfnGQ7S/BrhmmvpdwF1z6p0kaaB8I1eSGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqyGFDP8nmJPuS7Oqp/VWSx5LsTHJHkuO6+nCSXyTZ0U1f6tnmrUkeSjKW5PokWZBPJEma0Wyu9G8C1h1U2wacXlW/DfwbcFXPuieram03fbSnfgPwYWBNNx28T0nSAjts6FfVvcBzB9W+U1UHusX7gFWH2keSFcCxVXVfVRVwC3DRvHosSZq3QYzp/zHwrZ7lk5P8MMn3kryjq60ExnvajHe1aSXZmGQ0yejExMQAuihJgj5DP8mfAQeAr3alvcBJVXUG8Enga0mOnet+q2pTVY1U1cjQ0FA/XZQk9Vg+3w2TfBB4L3BON2RDVe0H9nfz25M8CZwC7OFXh4BWdTVJ0iKa15V+knXAp4H3VdXPe+pDSZZ1829g8obtU1W1F3g+yVndUzuXAHf23XtJ0pwc9ko/yRbgbOCEJOPA1Uw+rXMMsK178vK+7kmddwKfTfK/wIvAR6tq6ibwx5h8EuhVTN4D6L0PIElaBIcN/araME35xhna3g7cPsO6UeD0OfVOkjRQvpErSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGzCr0k2xOsi/Jrp7a65JsS/JE9/P4rp4k1ycZS7IzyVt6trm0a/9EkksH/3EkSYcy2yv9m4B1B9WuBO6uqjXA3d0ywHnAmm7aCNwAk78kgKuBtwFnAldP/aKQJC2OWYV+Vd0LPHdQ+ULg5m7+ZuCinvotNek+4LgkK4BzgW1V9VxV/QewjZf+IpEkLaDlfWx7YlXt7eZ/DJzYza8EnulpN97VZqq/RJKNTP4rgZNOOqmPLkoLZ/jKby7JcXdfe8GSHFdHh4HcyK2qAmoQ++r2t6mqRqpqZGhoaFC7laTm9RP6z3bDNnQ/93X1PcDqnnarutpMdUnSIukn9LcCU0/gXArc2VO/pHuK5yzgp90w0LeB9yQ5vruB+56uJklaJLMa00+yBTgbOCHJOJNP4VwL3JbkMuBp4ANd87uA84Ex4OfAhwCq6rkkfwE80LX7bFUdfHNYkrSAZhX6VbVhhlXnTNO2gMtn2M9mYPOseydJGijfyJWkhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkPmHfpJTk2yo2d6PsknknwmyZ6e+vk921yVZCzJ40nOHcxHkCTN1vL5blhVjwNrAZIsA/YAdwAfAr5QVZ/rbZ/kNGA98Cbg9cB3k5xSVS/Mtw+SpLkZ1PDOOcCTVfX0IdpcCNxaVfur6kfAGHDmgI4vSZqFQYX+emBLz/IVSXYm2Zzk+K62Enimp814V3uJJBuTjCYZnZiYGFAXJUl9h36SVwLvA/6hK90AvJHJoZ+9wHVz3WdVbaqqkaoaGRoa6reLkqTOIK70zwMerKpnAarq2ap6oapeBL7ML4dw9gCre7Zb1dUkSYtkEKG/gZ6hnSQreta9H9jVzW8F1ic5JsnJwBrg/gEcX5I0S/N+egcgyauBdwMf6Sn/ZZK1QAG7p9ZV1cNJbgMeAQ4Al/vkjiQtrr5Cv6r+G/iNg2oXH6L9NcA1/RxTkjR/vpErSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakhhr4kNaTv0E+yO8lDSXYkGe1qr0uyLckT3c/ju3qSXJ9kLMnOJG/p9/iSpNkb1JX+71bV2qoa6ZavBO6uqjXA3d0ywHnAmm7aCNwwoONLkmZhoYZ3LgRu7uZvBi7qqd9Sk+4DjkuyYoH6IEk6yCBCv4DvJNmeZGNXO7Gq9nbzPwZO7OZXAs/0bDve1X5Fko1JRpOMTkxMDKCLkiSA5QPYx+9U1Z4kvwlsS/JY78qqqiQ1lx1W1SZgE8DIyMictpUkzazvK/2q2tP93AfcAZwJPDs1bNP93Nc13wOs7tl8VVeTJC2CvkI/yauTvHZqHngPsAvYClzaNbsUuLOb3wpc0j3Fcxbw055hIEnSAut3eOdE4I4kU/v6WlX9U5IHgNuSXAY8DXyga38XcD4wBvwc+FCfx5ckzUFfoV9VTwFvnqb+78A509QLuLyfY0qS5s83ciWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGD+JZNHUGGr/zmkhx397UXLMlxJc2NV/qS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0JekhvhyliQdwtH2wqNX+pLUkHmHfpLVSe5J8kiSh5N8vKt/JsmeJDu66fyeba5KMpbk8STnDuIDSJJmr5/hnQPAp6rqwSSvBbYn2dat+0JVfa63cZLTgPXAm4DXA99NckpVvdBHHyRJczDvK/2q2ltVD3bzPwMeBVYeYpMLgVuran9V/QgYA86c7/ElSXM3kDH9JMPAGcAPutIVSXYm2Zzk+K62EnimZ7NxZvglkWRjktEkoxMTE4PooiSJAYR+ktcAtwOfqKrngRuANwJrgb3AdXPdZ1VtqqqRqhoZGhrqt4uSpE5foZ/kFUwG/ler6usAVfVsVb1QVS8CX+aXQzh7gNU9m6/qapKkRdLP0zsBbgQerarP99RX9DR7P7Crm98KrE9yTJKTgTXA/fM9viRp7vp5euftwMXAQ0l2dLU/BTYkWQsUsBv4CEBVPZzkNuARJp/8udwndyRpcc079KvqX4BMs+quQ2xzDXDNfI8pSeqPb+RKUkP87h1Js3a0fQ9Ni7zSl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEvSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUkEUP/STrkjyeZCzJlYt9fElq2aKGfpJlwBeB84DTgA1JTlvMPkhSyxb7Sv9MYKyqnqqq/wFuBS5c5D5IUrNSVYt3sOQPgHVV9Sfd8sXA26rqioPabQQ2dounAo/P85AnAD+Z57Yt8nzNjedrbjxfc9PP+fqtqhqabsXy+fdn4VTVJmBTv/tJMlpVIwPoUhM8X3Pj+Zobz9fcLNT5WuzhnT3A6p7lVV1NkrQIFjv0HwDWJDk5ySuB9cDWRe6DJDVrUYd3qupAkiuAbwPLgM1V9fACHrLvIaLGeL7mxvM1N56vuVmQ87WoN3IlSUvLN3IlqSGGviQ15KgMfb/qYW6SbE6yL8mupe7Ly0GS1UnuSfJIkoeTfHyp+3QkS/LrSe5P8q/d+frzpe7TkS7JsiQ/TPKNQe/7qAt9v+phXm4C1i11J15GDgCfqqrTgLOAy/0zdkj7gXdV1ZuBtcC6JGctbZeOeB8HHl2IHR91oY9f9TBnVXUv8NxS9+Ploqr2VtWD3fzPmPzLuXJpe3Xkqkn/1S2+opt8gmQGSVYBFwBfWYj9H42hvxJ4pmd5HP9CaoEkGQbOAH6wxF05onXDFTuAfcC2qvJ8zeyvgU8DLy7Ezo/G0JcWRZLXALcDn6iq55e6P0eyqnqhqtYy+Rb+mUlOX+IuHZGSvBfYV1XbF+oYR2Po+1UPWnBJXsFk4H+1qr6+1P15uaiq/wTuwXtIM3k78L4ku5kcmn5Xkr8b5AGOxtD3qx60oJIEuBF4tKo+v9T9OdIlGUpyXDf/KuDdwGNL2qkjVFVdVVWrqmqYyez656r6o0Ee46gL/ao6AEx91cOjwG0L/FUPL3tJtgDfB05NMp7ksqXu0xHu7cDFTF6F7eim85e6U0ewFcA9SXYyeVG2raoG/iiiZsevYZCkhhx1V/qSpJkZ+pLUEENfkhpi6EtSQwx9SWqIoS9JDTH0Jakh/wellFoMSKv+RQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Histogram of label counts.\n",
    "train_df.diagnosis.hist()\n",
    "plt.xticks([0,1,2,3,4])\n",
    "plt.grid(False)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bd572c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:11.768418Z",
     "iopub.status.busy": "2022-08-28T11:49:11.766797Z",
     "iopub.status.idle": "2022-08-28T11:49:14.911555Z",
     "shell.execute_reply": "2022-08-28T11:49:14.910125Z"
    },
    "papermill": {
     "duration": 3.153363,
     "end_time": "2022-08-28T11:49:14.913634",
     "exception": false,
     "start_time": "2022-08-28T11:49:11.760271",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([0.4058, 1.9795, 0.7331, 3.7948, 2.4827], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "from sklearn.utils import class_weight\n",
    "class_weights = class_weight.compute_class_weight(class_weight='balanced',classes=np.array([0,1,2,3,4]),y=train_df['diagnosis'].values)\n",
    "class_weights = torch.tensor(class_weights,dtype=torch.float).to(device)\n",
    "print(class_weights) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ef46d78f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:14.925957Z",
     "iopub.status.busy": "2022-08-28T11:49:14.925387Z",
     "iopub.status.idle": "2022-08-28T11:49:15.161081Z",
     "shell.execute_reply": "2022-08-28T11:49:15.160178Z"
    },
    "papermill": {
     "duration": 0.244199,
     "end_time": "2022-08-28T11:49:15.163202",
     "exception": false,
     "start_time": "2022-08-28T11:49:14.919003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "path = \"/kaggle/input/dr-aptos2019-preprocessed/\"\n",
    "num = int(np.random.randint(0,len(train_df)-1,(1,))) #Picks a random number.\n",
    "sample_image = (f'{path}train_images/{train_df[\"id_code\"][num]}.png')#Image file.\n",
    "sample_image = Image.open(sample_image) \n",
    "plt.imshow(sample_image)\n",
    "plt.axis('off')\n",
    "plt.title(f'Class: {train_df[\"diagnosis\"][num]}') #Class of the random image.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4f3310b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.177475Z",
     "iopub.status.busy": "2022-08-28T11:49:15.177166Z",
     "iopub.status.idle": "2022-08-28T11:49:15.181624Z",
     "shell.execute_reply": "2022-08-28T11:49:15.180713Z"
    },
    "papermill": {
     "duration": 0.013984,
     "end_time": "2022-08-28T11:49:15.183579",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.169595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def one_hot(x):\n",
    "    return torch.eye(5)[x,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "44f109d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.197362Z",
     "iopub.status.busy": "2022-08-28T11:49:15.196512Z",
     "iopub.status.idle": "2022-08-28T11:49:15.204116Z",
     "shell.execute_reply": "2022-08-28T11:49:15.203315Z"
    },
    "papermill": {
     "duration": 0.016471,
     "end_time": "2022-08-28T11:49:15.206084",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.189613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class dataset(Dataset):\n",
    "    def __init__(self,df,data_path,image_transform=None,train=True): # Constructor.\n",
    "        super(Dataset,self).__init__() #Calls the constructor of the Dataset class.\n",
    "        self.df = df\n",
    "        self.data_path = data_path\n",
    "        self.image_transform = image_transform\n",
    "        self.train = train\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.df) #Returns the number of samples in the dataset.\n",
    "    \n",
    "    def __getitem__(self,index):\n",
    "        image_id = self.df['id_code'][index]\n",
    "        image = Image.open(f'{self.data_path}/{image_id}.png') #Image.\n",
    "        if self.image_transform :\n",
    "            image = self.image_transform(image) #Applies transformation to the image.\n",
    "        \n",
    "        if self.train :\n",
    "            label = one_hot(self.df['diagnosis'][index]) #Label.\n",
    "            return image,label #If train == True, return image & label.\n",
    "        \n",
    "        else:\n",
    "            return image #If train != True, return image.\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d23d804c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.219976Z",
     "iopub.status.busy": "2022-08-28T11:49:15.219706Z",
     "iopub.status.idle": "2022-08-28T11:49:15.226072Z",
     "shell.execute_reply": "2022-08-28T11:49:15.225244Z"
    },
    "papermill": {
     "duration": 0.015778,
     "end_time": "2022-08-28T11:49:15.228055",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.212277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "path=\"/kaggle/input/dr-aptos2019-preprocessed/\"\n",
    "image_transform = transforms.Compose([transforms.Resize([512,512]),\n",
    "                                     # transforms.GaussianBlur(kernel_size=(5, 9), sigma=(0.1, 5)),\n",
    "                                      transforms.ToTensor(),\n",
    "                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))]) #Transformations to apply to the image.\n",
    "data_set = dataset(train_df,f'{path}train_images',image_transform=image_transform)\n",
    "\n",
    "train_set,valid_set = torch.utils.data.random_split(data_set,[3302,360],generator=torch.Generator().manual_seed(989))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c46f9559",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.241304Z",
     "iopub.status.busy": "2022-08-28T11:49:15.241049Z",
     "iopub.status.idle": "2022-08-28T11:49:15.246019Z",
     "shell.execute_reply": "2022-08-28T11:49:15.245120Z"
    },
    "papermill": {
     "duration": 0.014631,
     "end_time": "2022-08-28T11:49:15.248732",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.234101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<torch._C.Generator object at 0x7fd2e384be70>\n"
     ]
    }
   ],
   "source": [
    "print(torch.manual_seed(40))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "766371a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.263394Z",
     "iopub.status.busy": "2022-08-28T11:49:15.262877Z",
     "iopub.status.idle": "2022-08-28T11:49:15.268515Z",
     "shell.execute_reply": "2022-08-28T11:49:15.267498Z"
    },
    "papermill": {
     "duration": 0.014898,
     "end_time": "2022-08-28T11:49:15.270651",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.255753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataloader = DataLoader(train_set,batch_size=4,shuffle=True) #DataLoader for train_set.\n",
    "valid_dataloader = DataLoader(valid_set,batch_size=4,shuffle=False) #DataLoader for validation_set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9f36d496",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.284443Z",
     "iopub.status.busy": "2022-08-28T11:49:15.284193Z",
     "iopub.status.idle": "2022-08-28T11:49:15.295994Z",
     "shell.execute_reply": "2022-08-28T11:49:15.295177Z"
    },
    "papermill": {
     "duration": 0.020461,
     "end_time": "2022-08-28T11:49:15.297879",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.277418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import f1_score, roc_auc_score, cohen_kappa_score\n",
    "\n",
    "def validate():\n",
    "    model.eval()\n",
    "    total = 0\n",
    "    correct = 0\n",
    "    running_loss = 0\n",
    "    pred_lst = []\n",
    "    gt_lst = []\n",
    "    with torch.no_grad():\n",
    "        for x,y in valid_dataloader:\n",
    "            print(x.shape)\n",
    "            x= x.to(device)\n",
    "            output= model(x) #model's output.\n",
    "            output=output.detach().cpu().numpy()\n",
    "            #output=output.numpy()\n",
    "            #print(output)\n",
    "            pred_lst.append(output)\n",
    "            gt_lst.append(y)\n",
    "            del x, y, output\n",
    "            \n",
    "        \n",
    "        pred_lst=np.concatenate(pred_lst, axis=0)\n",
    "        gt_lst=np.concatenate(gt_lst, axis=0)\n",
    "        #print(pred_lst)\n",
    "        #for i in range(len(gt_lst)):                     \n",
    "            #print(np.mean(pred_lst[i][0],axis=0))\n",
    "            #print(np.sum(pred_lst,axis=0))\n",
    "        pred_lst2 = np.argmax(pred_lst, axis=1)\n",
    "        #print(pred_lst2)\n",
    "        #print(\"\\n\")\n",
    "        gt_lst2 = np.argmax(gt_lst, axis=1)\n",
    "        auc_lst=[]\n",
    "        acc_lst=[]\n",
    "        for k in range(0,5):\n",
    "            tmp_gt=gt_lst[:, k]\n",
    "            tmp_pred=pred_lst[:,k]\n",
    "            tmp_acc=accuracy_score(tmp_gt, tmp_pred.round())\n",
    "            acc_lst.append(tmp_acc)\n",
    "            try:\n",
    "                tmp_auc=roc_auc_score(tmp_gt, tmp_pred)\n",
    "            except ValueError:\n",
    "                tmp_auc=0\n",
    "            auc_lst.append(tmp_auc)\n",
    "\n",
    "        auc_lst=np.array(auc_lst)\n",
    "        acc_lst=np.array(acc_lst)\n",
    "        print('AUC Classwise Score on Validation set = ', auc_lst)\n",
    "        print('ACC Classwise Score on Validation set = ', acc_lst)\n",
    "        auc=np.mean(auc_lst)\n",
    "        acc = np.mean(acc_lst)\n",
    "        print('AUC Score on Validation set = ', auc)\n",
    "        print('ACC Score on Validation set = ', acc)\n",
    "        f1 = f1_score(gt_lst2, pred_lst2, average='weighted')\n",
    "        print('F1 Score on Validation set = ', f1)\n",
    "        cohen_kappa = cohen_kappa_score(gt_lst2, pred_lst2,weights=\"quadratic\")\n",
    "        print(\"Cohen's Kappa Score on Validation set = \", cohen_kappa)\n",
    "        print(classification_report(gt_lst2, pred_lst2, labels=[0,1, 2, 3,4]))\n",
    "        model.train()\n",
    "        return auc,acc,f1,cohen_kappa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "184ea31b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.311009Z",
     "iopub.status.busy": "2022-08-28T11:49:15.310758Z",
     "iopub.status.idle": "2022-08-28T11:49:15.320036Z",
     "shell.execute_reply": "2022-08-28T11:49:15.319013Z"
    },
    "papermill": {
     "duration": 0.018327,
     "end_time": "2022-08-28T11:49:15.322351",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.304024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train():\n",
    "    total_batches=len(train_dataloader)\n",
    "    cycle_length= len(train_dataloader)*2\n",
    "    loss_fn   = nn.CrossEntropyLoss(weight=class_weights) #CrossEntropyLoss\n",
    "    optimizer = torch.optim.SGD(model.parameters(),lr=0.001) \n",
    "    model.train()\n",
    "    total = 0\n",
    "    correct = 0\n",
    "    running_loss=0\n",
    "    count=0\n",
    "    max_epochs=50 #18\n",
    "    \n",
    "    \n",
    "    for epoch in range(0, max_epochs):\n",
    "        for batch,(x,y) in enumerate(train_dataloader):\n",
    "            output = model(x.to(device)) #model's predictions.\n",
    "            y=y.long()\n",
    "            loss   = loss_fn(output,torch.max(y.to(device), 1)[1])\n",
    "            running_loss=running_loss+loss.item()\n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            if (batch+1) % 25 == 0: # displays after every 20 batches\n",
    "                    print (\"Epoch [{}/{}], Batch [{}/{}] Classification Loss: {:.4f}\".format(epoch+1, max_epochs, batch+1, total_batches, running_loss/(batch+1) ), end =\"\\r\")\n",
    "                    \n",
    "            count=count+1\n",
    "            if count>=cycle_length:\n",
    "                count=0\n",
    "                auc,acc,f1,cohen_kappa=validate()\n",
    "                auc=np.round(auc,4)\n",
    "                nm='DR_CNN_Model_Ens_'+str(auc)+'_mode.pt'\n",
    "                torch.save({'model_state_dict': model.state_dict(),'optimizer_state_dict': optimizer.state_dict()}, nm)\n",
    "                del nm\n",
    "                running_loss=0\n",
    "                \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e3fe67da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.335869Z",
     "iopub.status.busy": "2022-08-28T11:49:15.335619Z",
     "iopub.status.idle": "2022-08-28T11:49:15.340370Z",
     "shell.execute_reply": "2022-08-28T11:49:15.339491Z"
    },
    "papermill": {
     "duration": 0.014019,
     "end_time": "2022-08-28T11:49:15.342279",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.328260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy.stats import bernoulli, uniform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bfdfc92a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.355168Z",
     "iopub.status.busy": "2022-08-28T11:49:15.354917Z",
     "iopub.status.idle": "2022-08-28T11:49:15.363053Z",
     "shell.execute_reply": "2022-08-28T11:49:15.362122Z"
    },
    "papermill": {
     "duration": 0.017017,
     "end_time": "2022-08-28T11:49:15.365221",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.348204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bernoulli.rvs(0.5, size=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "08e88cec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.379294Z",
     "iopub.status.busy": "2022-08-28T11:49:15.379044Z",
     "iopub.status.idle": "2022-08-28T11:49:15.389790Z",
     "shell.execute_reply": "2022-08-28T11:49:15.388954Z"
    },
    "papermill": {
     "duration": 0.019881,
     "end_time": "2022-08-28T11:49:15.391780",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.371899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "class ENS_MOD(nn.Module):\n",
    "    def __init__(self, model1,model2,model3,model4):\n",
    "        super(ENS_MOD, self).__init__()\n",
    "        self.features1 = model1\n",
    "        self.features2 = model2\n",
    "        self.features3 = model3\n",
    "        self.features4 = model4\n",
    "        self.transform1 = transforms.ColorJitter(brightness=0.15,contrast=(0.5, 1.5),saturation=(0.5, 2.5),hue=0.15)\n",
    "        self.transform2 = transforms.RandomResizedCrop(512, scale=(0.8, 1.0), ratio=(0.75, 1.3333333333333333))\n",
    "        self.transform3 = transforms.RandomHorizontalFlip(p=bernoulli.rvs(0.5, size=1)[0])\n",
    "        self.transform4 = transforms.RandomVerticalFlip(p=bernoulli.rvs(0.5, size=1)[0]) \n",
    "        #self.sftm=torch.nn.Softmax(dim=0)\n",
    "\n",
    "                                               \n",
    "    \n",
    "    def forward_feature(self, x):\n",
    "        \"\"\"x1 = self.features1(x)\n",
    "        x2 = self.features2(x)\n",
    "        x3 = self.features3(x)\n",
    "        x4 = self.features4(x)\n",
    "        print(x1)\"\"\"\n",
    "        x1 = torch.unsqueeze(self.features1(self.transform1(x)),-1)\n",
    "        x2 = torch.unsqueeze(self.features2(self.transform2(x)),-1)\n",
    "        x3 = torch.unsqueeze(self.features3(self.transform3(x)),-1)\n",
    "        x4 = torch.unsqueeze(self.features4(self.transform4(x)),-1)\n",
    "        \n",
    "        x= torch.cat((x1,x2,x3,x4),2)\n",
    "        \"\"\"a = x.argmax(1)\n",
    "        a = a.cpu()\n",
    "        x = x.cpu()\n",
    "        x = torch.zeros (x.shape).scatter (1, a.unsqueeze (1), 1.0)\n",
    "        x = x.to(device)\"\"\"\n",
    "        #print(x)\n",
    "        x = torch.mean(x,dim=2)\n",
    "        #print(\"mean - \",x)\n",
    "        return x\n",
    "    \n",
    "    def forward(self, x):\n",
    "        out = self.forward_feature(x)\n",
    "        return out\n",
    "\n",
    "    def get_config_optim(self, lr):\n",
    "        return [{'params': self.parameters(), 'lr': lr}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9a04c2c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.405843Z",
     "iopub.status.busy": "2022-08-28T11:49:15.405588Z",
     "iopub.status.idle": "2022-08-28T11:49:15.413524Z",
     "shell.execute_reply": "2022-08-28T11:49:15.412594Z"
    },
    "papermill": {
     "duration": 0.017211,
     "end_time": "2022-08-28T11:49:15.415429",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.398218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    model_dict = {'ENS_MOD': ENS_MOD}\n",
    "    backbone1=models.resnet50()\n",
    "    backbone2=models.resnet50()\n",
    "    backbone3=models.resnet50()\n",
    "    backbone4=models.resnet50()\n",
    "    backbone1.fc=nn.Sequential(nn.Linear(2048,5),nn.Sigmoid())\n",
    "    backbone2.fc=nn.Sequential(nn.Linear(2048,5),nn.Sigmoid())\n",
    "    backbone3.fc=nn.Sequential(nn.Linear(2048,5),nn.Sigmoid())\n",
    "    backbone4.fc=nn.Sequential(nn.Linear(2048,5),nn.Sigmoid())\n",
    "    checkpoint = torch.load('../input/dr-resnet-50-new/DR_CNN_Model_RESENET50.pt_0.6545996104937565')\n",
    "    backbone1.load_state_dict(checkpoint['model_state_dict'],strict=False)\n",
    "    del checkpoint\n",
    "    checkpoint = torch.load('../input/dr-resnet-50-new/DR_CNN_Model_RESENET50.pt_0.6721656333038087')\n",
    "    backbone2.load_state_dict(checkpoint['model_state_dict'],strict=False)\n",
    "    del checkpoint\n",
    "    checkpoint = torch.load('../input/dr-resnet-50-new/DR_CNN_Model_RESENET50.pt_0.6835457441966318')\n",
    "    backbone3.load_state_dict(checkpoint['model_state_dict'],strict=False)\n",
    "    del checkpoint\n",
    "    checkpoint = torch.load('../input/dr-resnet-50-new/DR_CNN_Model_RESENET50.pt_0.6848372801174519')\n",
    "    backbone4.load_state_dict(checkpoint['model_state_dict'],strict=False)\n",
    "    del checkpoint\n",
    "    model = model_dict['ENS_MOD'](backbone1,backbone2,backbone3,backbone4)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8d24974f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:15.430159Z",
     "iopub.status.busy": "2022-08-28T11:49:15.428377Z",
     "iopub.status.idle": "2022-08-28T11:49:21.401256Z",
     "shell.execute_reply": "2022-08-28T11:49:21.399362Z"
    },
    "papermill": {
     "duration": 5.983916,
     "end_time": "2022-08-28T11:49:21.405331",
     "exception": false,
     "start_time": "2022-08-28T11:49:15.421415",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = get_model()\n",
    "model = model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8c251182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:21.429840Z",
     "iopub.status.busy": "2022-08-28T11:49:21.429321Z",
     "iopub.status.idle": "2022-08-28T11:49:21.452347Z",
     "shell.execute_reply": "2022-08-28T11:49:21.451115Z"
    },
    "papermill": {
     "duration": 0.045463,
     "end_time": "2022-08-28T11:49:21.463549",
     "exception": false,
     "start_time": "2022-08-28T11:49:21.418086",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ENS_MOD(\n",
      "  (features1): ResNet(\n",
      "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
      "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (relu): ReLU(inplace=True)\n",
      "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
      "    (layer1): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer2): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer3): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (4): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (5): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer4): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
      "    (fc): Sequential(\n",
      "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
      "      (1): Sigmoid()\n",
      "    )\n",
      "  )\n",
      "  (features2): ResNet(\n",
      "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
      "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (relu): ReLU(inplace=True)\n",
      "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
      "    (layer1): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer2): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer3): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (4): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (5): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer4): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
      "    (fc): Sequential(\n",
      "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
      "      (1): Sigmoid()\n",
      "    )\n",
      "  )\n",
      "  (features3): ResNet(\n",
      "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
      "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (relu): ReLU(inplace=True)\n",
      "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
      "    (layer1): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer2): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer3): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (4): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (5): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer4): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
      "    (fc): Sequential(\n",
      "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
      "      (1): Sigmoid()\n",
      "    )\n",
      "  )\n",
      "  (features4): ResNet(\n",
      "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
      "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (relu): ReLU(inplace=True)\n",
      "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
      "    (layer1): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer2): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer3): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (3): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (4): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (5): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (layer4): Sequential(\n",
      "      (0): Bottleneck(\n",
      "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "        (downsample): Sequential(\n",
      "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "      (1): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "      (2): Bottleneck(\n",
      "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
      "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        (relu): ReLU(inplace=True)\n",
      "      )\n",
      "    )\n",
      "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
      "    (fc): Sequential(\n",
      "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
      "      (1): Sigmoid()\n",
      "    )\n",
      "  )\n",
      "  (transform1): ColorJitter(brightness=[0.85, 1.15], contrast=(0.5, 1.5), saturation=(0.5, 2.5), hue=[-0.15, 0.15])\n",
      "  (transform2): RandomResizedCrop(size=(512, 512), scale=(0.8, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear)\n",
      "  (transform3): RandomHorizontalFlip(p=0)\n",
      "  (transform4): RandomVerticalFlip(p=1)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7ff443b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:21.491496Z",
     "iopub.status.busy": "2022-08-28T11:49:21.491009Z",
     "iopub.status.idle": "2022-08-28T11:49:52.099873Z",
     "shell.execute_reply": "2022-08-28T11:49:52.098601Z"
    },
    "papermill": {
     "duration": 30.627187,
     "end_time": "2022-08-28T11:49:52.103366",
     "exception": false,
     "start_time": "2022-08-28T11:49:21.476179",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.93859948 0.77708978 0.78834256 0.77436003 0.71330523]\n",
      "ACC Classwise Score on Validation set =  [0.91111111 0.71666667 0.74444444 0.575      0.58055556]\n",
      "AUC Score on Validation set =  0.7983394173419243\n",
      "ACC Score on Validation set =  0.7055555555555555\n",
      "F1 Score on Validation set =  0.6273505291005291\n",
      "Cohen's Kappa Score on Validation set =  0.6563150445425027\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.95      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.84      0.66       111\n",
      "           3       0.14      0.07      0.10        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.31      0.37      0.33       360\n",
      "weighted avg       0.58      0.70      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.7983394173419243,\n",
       " 0.7055555555555555,\n",
       " 0.6273505291005291,\n",
       " 0.6563150445425027)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "validate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a234a92b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-28T11:49:52.129418Z",
     "iopub.status.busy": "2022-08-28T11:49:52.129038Z",
     "iopub.status.idle": "2022-08-28T23:13:45.565280Z",
     "shell.execute_reply": "2022-08-28T23:13:45.564202Z"
    },
    "papermill": {
     "duration": 41033.453489,
     "end_time": "2022-08-28T23:13:45.569608",
     "exception": false,
     "start_time": "2022-08-28T11:49:52.116119",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92623561 0.76219563 0.7790441  0.7706441  0.71340327]\n",
      "ACC Classwise Score on Validation set =  [0.88611111 0.67777778 0.74444444 0.88888889 0.62777778]\n",
      "AUC Score on Validation set =  0.7903045437615299\n",
      "ACC Score on Validation set =  0.765\n",
      "F1 Score on Validation set =  0.6162263009277934\n",
      "Cohen's Kappa Score on Validation set =  0.6453152192219166\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.99      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.79      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.27      0.36      0.31       360\n",
      "weighted avg       0.55      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.90611523 0.75843026 0.7681537  0.76672172 0.69849985]\n",
      "ACC Classwise Score on Validation set =  [0.87222222 0.69444444 0.73888889 0.94722222 0.65      ]\n",
      "AUC Score on Validation set =  0.779584150788175\n",
      "ACC Score on Validation set =  0.7805555555555554\n",
      "F1 Score on Validation set =  0.6083937442171737\n",
      "Cohen's Kappa Score on Validation set =  0.6135433600538147\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.98      0.88       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.77      0.65       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.69       360\n",
      "   macro avg       0.27      0.35      0.31       360\n",
      "weighted avg       0.54      0.69      0.61       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92182992 0.75784453 0.79029632 0.76672172 0.68036082]\n",
      "ACC Classwise Score on Validation set =  [0.88055556 0.67222222 0.73055556 0.91388889 0.625     ]\n",
      "AUC Score on Validation set =  0.7834106609662105\n",
      "ACC Score on Validation set =  0.7644444444444444\n",
      "F1 Score on Validation set =  0.6137906914985227\n",
      "Cohen's Kappa Score on Validation set =  0.6348327305605787\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.96      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.82      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.27      0.36      0.31       360\n",
      "weighted avg       0.55      0.70      0.61       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.90533958 0.77692243 0.75364521 0.77952106 0.69928424]\n",
      "ACC Classwise Score on Validation set =  [0.89166667 0.66388889 0.73611111 0.90555556 0.62222222]\n",
      "AUC Score on Validation set =  0.782942505036851\n",
      "ACC Score on Validation set =  0.763888888888889\n",
      "F1 Score on Validation set =  0.6337037861474178\n",
      "Cohen's Kappa Score on Validation set =  0.6478394011568561\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.96      0.89       167\n",
      "           1       1.00      0.05      0.10        37\n",
      "           2       0.56      0.85      0.68       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.48      0.37      0.33       360\n",
      "weighted avg       0.66      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.91481803 0.7251276  0.77376171 0.76878613 0.7070301 ]\n",
      "ACC Classwise Score on Validation set =  [0.88333333 0.68611111 0.73888889 0.90833333 0.64166667]\n",
      "AUC Score on Validation set =  0.7779047156784735\n",
      "ACC Score on Validation set =  0.7716666666666667\n",
      "F1 Score on Validation set =  0.6193898423997862\n",
      "Cohen's Kappa Score on Validation set =  0.648587824912794\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.98      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.81      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.55      0.71      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.91661754 0.76328341 0.76341402 0.76032205 0.72595352]\n",
      "ACC Classwise Score on Validation set =  [0.88333333 0.71388889 0.75277778 0.93055556 0.62777778]\n",
      "AUC Score on Validation set =  0.7859181077079673\n",
      "ACC Score on Validation set =  0.7816666666666667\n",
      "F1 Score on Validation set =  0.6269377958419055\n",
      "Cohen's Kappa Score on Validation set =  0.6602434077079107\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.98      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.57      0.84      0.68       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.32       360\n",
      "weighted avg       0.56      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92066644 0.78545728 0.77614964 0.74215524 0.68585155]\n",
      "ACC Classwise Score on Validation set =  [0.90277778 0.66388889 0.74444444 0.9        0.61944444]\n",
      "AUC Score on Validation set =  0.7820560328691039\n",
      "ACC Score on Validation set =  0.7661111111111111\n",
      "F1 Score on Validation set =  0.6216730956814756\n",
      "Cohen's Kappa Score on Validation set =  0.6462592739423458\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.96      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.85      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.71      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.9253824  0.77190193 0.7739788  0.7510322  0.70791254]\n",
      "ACC Classwise Score on Validation set =  [0.88611111 0.70555556 0.74166667 0.92777778 0.63888889]\n",
      "AUC Score on Validation set =  0.7860415744065004\n",
      "ACC Score on Validation set =  0.78\n",
      "F1 Score on Validation set =  0.6154668324376354\n",
      "Cohen's Kappa Score on Validation set =  0.6275162108824359\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.97      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.81      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.27      0.36      0.31       360\n",
      "weighted avg       0.55      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.9171605  0.74688311 0.75433265 0.78839802 0.72124718]\n",
      "ACC Classwise Score on Validation set =  [0.89444444 0.675      0.73333333 0.93333333 0.63333333]\n",
      "AUC Score on Validation set =  0.7856042897671337\n",
      "ACC Score on Validation set =  0.773888888888889\n",
      "F1 Score on Validation set =  0.6251456739689846\n",
      "Cohen's Kappa Score on Validation set =  0.6516424751718869\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.96      0.89       167\n",
      "           1       1.00      0.03      0.05        37\n",
      "           2       0.55      0.83      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.48      0.36      0.32       360\n",
      "weighted avg       0.66      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.91976668 0.77558363 0.7598683  0.76424443 0.70987352]\n",
      "ACC Classwise Score on Validation set =  [0.9        0.68055556 0.73611111 0.91666667 0.60833333]\n",
      "AUC Score on Validation set =  0.7858673125118885\n",
      "ACC Score on Validation set =  0.7683333333333333\n",
      "F1 Score on Validation set =  0.6221149759608999\n",
      "Cohen's Kappa Score on Validation set =  0.6457376212353241\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.95      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.86      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.71      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.91733114 0.78378378 0.75194472 0.7888109  0.6945779 ]\n",
      "ACC Classwise Score on Validation set =  [0.87777778 0.71944444 0.74166667 0.92777778 0.66666667]\n",
      "AUC Score on Validation set =  0.7872896880575497\n",
      "ACC Score on Validation set =  0.7866666666666666\n",
      "F1 Score on Validation set =  0.6221004109134379\n",
      "Cohen's Kappa Score on Validation set =  0.6358807741206385\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.96      0.89       167\n",
      "           1       1.00      0.03      0.05        37\n",
      "           2       0.55      0.82      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.48      0.36      0.32       360\n",
      "weighted avg       0.66      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.91824641 0.75851393 0.78899381 0.75       0.68153741]\n",
      "ACC Classwise Score on Validation set =  [0.90277778 0.66666667 0.74722222 0.925      0.61944444]\n",
      "AUC Score on Validation set =  0.7794583118687354\n",
      "ACC Score on Validation set =  0.7722222222222221\n",
      "F1 Score on Validation set =  0.6334917993715684\n",
      "Cohen's Kappa Score on Validation set =  0.6544458012665777\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.96      0.90       167\n",
      "           1       1.00      0.03      0.05        37\n",
      "           2       0.56      0.86      0.68       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.48      0.37      0.33       360\n",
      "weighted avg       0.67      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.93582266 0.79976571 0.7903325  0.76630884 0.69810766]\n",
      "ACC Classwise Score on Validation set =  [0.89722222 0.66944444 0.73333333 0.91666667 0.61388889]\n",
      "AUC Score on Validation set =  0.7980674719305021\n",
      "ACC Score on Validation set =  0.7661111111111111\n",
      "F1 Score on Validation set =  0.6208215297450426\n",
      "Cohen's Kappa Score on Validation set =  0.6490450204638472\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.95      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.86      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92832987 0.77449586 0.78385615 0.75928984 0.68183155]\n",
      "ACC Classwise Score on Validation set =  [0.89444444 0.71388889 0.73333333 0.89166667 0.60555556]\n",
      "AUC Score on Validation set =  0.7855606534733663\n",
      "ACC Score on Validation set =  0.7677777777777778\n",
      "F1 Score on Validation set =  0.617741453502271\n",
      "Cohen's Kappa Score on Validation set =  0.6457376212353241\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.95      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.54      0.84      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92590984 0.74295038 0.78754658 0.76383154 0.72036474]\n",
      "ACC Classwise Score on Validation set =  [0.89444444 0.67222222 0.73888889 0.91666667 0.60555556]\n",
      "AUC Score on Validation set =  0.7881206175245332\n",
      "ACC Score on Validation set =  0.7655555555555555\n",
      "F1 Score on Validation set =  0.6199282147315854\n",
      "Cohen's Kappa Score on Validation set =  0.6416539050535988\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.95      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.85      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92119388 0.77692243 0.77169941 0.77456647 0.69369546]\n",
      "ACC Classwise Score on Validation set =  [0.89166667 0.69166667 0.73611111 0.91111111 0.61666667]\n",
      "AUC Score on Validation set =  0.7876155319034432\n",
      "ACC Score on Validation set =  0.7694444444444445\n",
      "F1 Score on Validation set =  0.6169002041306835\n",
      "Cohen's Kappa Score on Validation set =  0.6133529811834051\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.95      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.55      0.85      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.70      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92792653 0.75625471 0.78957271 0.75516102 0.69389156]\n",
      "ACC Classwise Score on Validation set =  [0.88888889 0.71388889 0.74166667 0.91388889 0.65833333]\n",
      "AUC Score on Validation set =  0.7845613048512925\n",
      "ACC Score on Validation set =  0.7833333333333333\n",
      "F1 Score on Validation set =  0.6283104669409221\n",
      "Cohen's Kappa Score on Validation set =  0.6326219941927663\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.98      0.89       167\n",
      "           1       1.00      0.03      0.05        37\n",
      "           2       0.57      0.83      0.68       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.48      0.37      0.32       360\n",
      "weighted avg       0.66      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92888834 0.78796753 0.76015775 0.74607762 0.70791254]\n",
      "ACC Classwise Score on Validation set =  [0.90555556 0.70555556 0.75833333 0.9        0.65277778]\n",
      "AUC Score on Validation set =  0.786200756353487\n",
      "ACC Score on Validation set =  0.7844444444444444\n",
      "F1 Score on Validation set =  0.6338525317016936\n",
      "Cohen's Kappa Score on Validation set =  0.6666477884125276\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.98      0.91       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.57      0.86      0.69       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.72       360\n",
      "   macro avg       0.28      0.37      0.32       360\n",
      "weighted avg       0.57      0.72      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.94049207 0.77658773 0.78268027 0.75165153 0.71634474]\n",
      "ACC Classwise Score on Validation set =  [0.90833333 0.69166667 0.74444444 0.91111111 0.625     ]\n",
      "AUC Score on Validation set =  0.7935512688137456\n",
      "ACC Score on Validation set =  0.7761111111111111\n",
      "F1 Score on Validation set =  0.6273406437841813\n",
      "Cohen's Kappa Score on Validation set =  0.6536496764672495\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.96      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.86      0.68       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.32       360\n",
      "weighted avg       0.57      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.92822128 0.79650238 0.76276276 0.74772915 0.70820669]\n",
      "ACC Classwise Score on Validation set =  [0.88888889 0.75       0.74444444 0.91388889 0.66666667]\n",
      "AUC Score on Validation set =  0.7886844523091472\n",
      "ACC Score on Validation set =  0.7927777777777777\n",
      "F1 Score on Validation set =  0.6225168890314876\n",
      "Cohen's Kappa Score on Validation set =  0.6396955173385961\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.98      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.83      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.71      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.9299122  0.76294871 0.76800897 0.75846408 0.73820963]\n",
      "ACC Classwise Score on Validation set =  [0.89444444 0.70555556 0.74166667 0.875      0.625     ]\n",
      "AUC Score on Validation set =  0.791508716810079\n",
      "ACC Score on Validation set =  0.7683333333333333\n",
      "F1 Score on Validation set =  0.6221149759608999\n",
      "Cohen's Kappa Score on Validation set =  0.633486472690148\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.95      0.89       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.86      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.71      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.93841333 0.74211363 0.80104201 0.74360033 0.70732425]\n",
      "ACC Classwise Score on Validation set =  [0.91111111 0.625      0.72777778 0.88055556 0.58611111]\n",
      "AUC Score on Validation set =  0.7864987086166859\n",
      "ACC Score on Validation set =  0.7461111111111112\n",
      "F1 Score on Validation set =  0.6270577173361569\n",
      "Cohen's Kappa Score on Validation set =  0.6920532633800006\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.54      0.87      0.66       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.57      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.94339301 0.75592001 0.77520894 0.74958712 0.72585548]\n",
      "ACC Classwise Score on Validation set =  [0.90555556 0.69444444 0.74722222 0.88055556 0.625     ]\n",
      "AUC Score on Validation set =  0.7899929102843162\n",
      "ACC Score on Validation set =  0.7705555555555555\n",
      "F1 Score on Validation set =  0.6321331364709656\n",
      "Cohen's Kappa Score on Validation set =  0.6863435123169486\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.96      0.91       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.87      0.69       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.72       360\n",
      "   macro avg       0.28      0.37      0.32       360\n",
      "weighted avg       0.57      0.72      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.93690857 0.78855326 0.79120084 0.74814203 0.69751936]\n",
      "ACC Classwise Score on Validation set =  [0.88888889 0.76388889 0.74444444 0.9        0.67222222]\n",
      "AUC Score on Validation set =  0.7924648121689676\n",
      "ACC Score on Validation set =  0.7938888888888889\n",
      "F1 Score on Validation set =  0.6229084787266607\n",
      "Cohen's Kappa Score on Validation set =  0.6516194560433359\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.98      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.83      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.31       360\n",
      "weighted avg       0.56      0.71      0.62       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "torch.Size([4, 3, 512, 512])\n",
      "AUC Classwise Score on Validation set =  [0.93590022 0.77357543 0.78675061 0.73616846 0.70771644]\n",
      "ACC Classwise Score on Validation set =  [0.89444444 0.73055556 0.74444444 0.89722222 0.67222222]\n",
      "AUC Score on Validation set =  0.7880222315881669\n",
      "ACC Score on Validation set =  0.7877777777777778\n",
      "F1 Score on Validation set =  0.6264287829927151\n",
      "Cohen's Kappa Score on Validation set =  0.6546689303904925\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.97      0.90       167\n",
      "           1       0.00      0.00      0.00        37\n",
      "           2       0.56      0.85      0.67       111\n",
      "           3       0.00      0.00      0.00        14\n",
      "           4       0.00      0.00      0.00        31\n",
      "\n",
      "    accuracy                           0.71       360\n",
      "   macro avg       0.28      0.36      0.32       360\n",
      "weighted avg       0.56      0.71      0.63       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ENS_MOD(\n",
       "  (features1): ResNet(\n",
       "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu): ReLU(inplace=True)\n",
       "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (layer1): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer2): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer3): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (4): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (5): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer4): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
       "    (fc): Sequential(\n",
       "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
       "      (1): Sigmoid()\n",
       "    )\n",
       "  )\n",
       "  (features2): ResNet(\n",
       "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu): ReLU(inplace=True)\n",
       "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (layer1): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer2): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer3): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (4): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (5): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer4): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
       "    (fc): Sequential(\n",
       "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
       "      (1): Sigmoid()\n",
       "    )\n",
       "  )\n",
       "  (features3): ResNet(\n",
       "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu): ReLU(inplace=True)\n",
       "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (layer1): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer2): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer3): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (4): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (5): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer4): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
       "    (fc): Sequential(\n",
       "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
       "      (1): Sigmoid()\n",
       "    )\n",
       "  )\n",
       "  (features4): ResNet(\n",
       "    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu): ReLU(inplace=True)\n",
       "    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (layer1): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer2): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer3): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (3): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (4): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (5): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (layer4): Sequential(\n",
       "      (0): Bottleneck(\n",
       "        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "        (downsample): Sequential(\n",
       "          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
       "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        )\n",
       "      )\n",
       "      (1): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "      (2): Bottleneck(\n",
       "        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu): ReLU(inplace=True)\n",
       "      )\n",
       "    )\n",
       "    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
       "    (fc): Sequential(\n",
       "      (0): Linear(in_features=2048, out_features=5, bias=True)\n",
       "      (1): Sigmoid()\n",
       "    )\n",
       "  )\n",
       "  (transform1): ColorJitter(brightness=[0.85, 1.15], contrast=(0.5, 1.5), saturation=(0.5, 2.5), hue=[-0.15, 0.15])\n",
       "  (transform2): RandomResizedCrop(size=(512, 512), scale=(0.8, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear)\n",
       "  (transform3): RandomHorizontalFlip(p=0)\n",
       "  (transform4): RandomVerticalFlip(p=1)\n",
       ")"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5afb6f9f",
   "metadata": {
    "papermill": {
     "duration": 0.238935,
     "end_time": "2022-08-28T23:13:46.013764",
     "exception": false,
     "start_time": "2022-08-28T23:13:45.774829",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "checkpoint = torch.load('DR_CNN_Model_Ens0.8291.pt')\n",
    "\n",
    "AUC Classwise Score on Validation set =  [0.92623561 0.79198393 0.78877673 0.81812552 0.78811648]\n",
    "ACC Classwise Score on Validation set =  [0.925      0.81388889 0.74166667 0.88611111 0.65833333]\n",
    "AUC Score on Validation set =  0.8226476545446385\n",
    "ACC Score on Validation set =  0.805\n",
    "F1 Score on Validation set =  0.6660594217635571\n",
    "Cohen's Kappa Score on Validation set =  0.6944837340876946\n",
    "              precision    recall  f1-score   support\n",
    "\n",
    "           0       0.89      0.96      0.92       167\n",
    "           1       0.36      0.27      0.31        37\n",
    "           2       0.57      0.77      0.65       111\n",
    "           3       0.33      0.07      0.12        14\n",
    "           4       0.00      0.00      0.00        31\n",
    "\n",
    "    accuracy                           0.71       360\n",
    "   macro avg       0.43      0.41      0.40       360\n",
    "weighted avg       0.64      0.71      0.67       360"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77e222e6",
   "metadata": {
    "papermill": {
     "duration": 0.267341,
     "end_time": "2022-08-28T23:13:46.516129",
     "exception": false,
     "start_time": "2022-08-28T23:13:46.248788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 41088.685737,
   "end_time": "2022-08-28T23:13:49.367224",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-08-28T11:49:00.681487",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
